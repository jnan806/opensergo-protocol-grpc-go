// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transport/v1/protocol.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatusMultiError, or nil if none found.
func (m *Status) ValidateAll() error {
	return m.validate(true)
}

func (m *Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatusValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatusValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatusValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StatusMultiError(errors)
	}

	return nil
}

// StatusMultiError is an error wrapping multiple validation errors returned by
// Status.ValidateAll() if the designated constraints aren't met.
type StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusMultiError) AllErrors() []error { return m }

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}

// Validate checks the field values on SubscribeLabelKV with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeLabelKV) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeLabelKV with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeLabelKVMultiError, or nil if none found.
func (m *SubscribeLabelKV) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeLabelKV) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return SubscribeLabelKVMultiError(errors)
	}

	return nil
}

// SubscribeLabelKVMultiError is an error wrapping multiple validation errors
// returned by SubscribeLabelKV.ValidateAll() if the designated constraints
// aren't met.
type SubscribeLabelKVMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeLabelKVMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeLabelKVMultiError) AllErrors() []error { return m }

// SubscribeLabelKVValidationError is the validation error returned by
// SubscribeLabelKV.Validate if the designated constraints aren't met.
type SubscribeLabelKVValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeLabelKVValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeLabelKVValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeLabelKVValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeLabelKVValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeLabelKVValidationError) ErrorName() string { return "SubscribeLabelKVValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeLabelKVValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeLabelKV.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeLabelKVValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeLabelKVValidationError{}

// Validate checks the field values on SubscribeRequestTarget with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequestTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequestTarget with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestTargetMultiError, or nil if none found.
func (m *SubscribeRequestTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequestTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for App

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubscribeRequestTargetValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubscribeRequestTargetValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscribeRequestTargetValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubscribeRequestTargetMultiError(errors)
	}

	return nil
}

// SubscribeRequestTargetMultiError is an error wrapping multiple validation
// errors returned by SubscribeRequestTarget.ValidateAll() if the designated
// constraints aren't met.
type SubscribeRequestTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestTargetMultiError) AllErrors() []error { return m }

// SubscribeRequestTargetValidationError is the validation error returned by
// SubscribeRequestTarget.Validate if the designated constraints aren't met.
type SubscribeRequestTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestTargetValidationError) ErrorName() string {
	return "SubscribeRequestTargetValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeRequestTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequestTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestTargetValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeRequestValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeRequestValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeRequestValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OpType

	// no validation rules for ResponseAck

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubscribeRequestValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubscribeRequestValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscribeRequestValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Identifier

	// no validation rules for RequestId

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on ControlPlaneDesc with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ControlPlaneDesc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControlPlaneDesc with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ControlPlaneDescMultiError, or nil if none found.
func (m *ControlPlaneDesc) ValidateAll() error {
	return m.validate(true)
}

func (m *ControlPlaneDesc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identifier

	if len(errors) > 0 {
		return ControlPlaneDescMultiError(errors)
	}

	return nil
}

// ControlPlaneDescMultiError is an error wrapping multiple validation errors
// returned by ControlPlaneDesc.ValidateAll() if the designated constraints
// aren't met.
type ControlPlaneDescMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControlPlaneDescMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControlPlaneDescMultiError) AllErrors() []error { return m }

// ControlPlaneDescValidationError is the validation error returned by
// ControlPlaneDesc.Validate if the designated constraints aren't met.
type ControlPlaneDescValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlPlaneDescValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlPlaneDescValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlPlaneDescValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlPlaneDescValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlPlaneDescValidationError) ErrorName() string { return "ControlPlaneDescValidationError" }

// Error satisfies the builtin error interface
func (e ControlPlaneDescValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlPlaneDesc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlPlaneDescValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlPlaneDescValidationError{}

// Validate checks the field values on SubscribeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeResponseMultiError, or nil if none found.
func (m *SubscribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Ack

	// no validation rules for Namespace

	// no validation rules for App

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetDataWithVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "DataWithVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "DataWithVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataWithVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeResponseValidationError{
				field:  "DataWithVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetControlPlane()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "ControlPlane",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "ControlPlane",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControlPlane()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeResponseValidationError{
				field:  "ControlPlane",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ResponseId

	if len(errors) > 0 {
		return SubscribeResponseMultiError(errors)
	}

	return nil
}

// SubscribeResponseMultiError is an error wrapping multiple validation errors
// returned by SubscribeResponse.ValidateAll() if the designated constraints
// aren't met.
type SubscribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeResponseMultiError) AllErrors() []error { return m }

// SubscribeResponseValidationError is the validation error returned by
// SubscribeResponse.Validate if the designated constraints aren't met.
type SubscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeResponseValidationError) ErrorName() string {
	return "SubscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeResponseValidationError{}

// Validate checks the field values on DataWithVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DataWithVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataWithVersion with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataWithVersionMultiError, or nil if none found.
func (m *DataWithVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *DataWithVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataWithVersionValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataWithVersionValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataWithVersionValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	if len(errors) > 0 {
		return DataWithVersionMultiError(errors)
	}

	return nil
}

// DataWithVersionMultiError is an error wrapping multiple validation errors
// returned by DataWithVersion.ValidateAll() if the designated constraints
// aren't met.
type DataWithVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataWithVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataWithVersionMultiError) AllErrors() []error { return m }

// DataWithVersionValidationError is the validation error returned by
// DataWithVersion.Validate if the designated constraints aren't met.
type DataWithVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataWithVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataWithVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataWithVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataWithVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataWithVersionValidationError) ErrorName() string { return "DataWithVersionValidationError" }

// Error satisfies the builtin error interface
func (e DataWithVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataWithVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataWithVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataWithVersionValidationError{}
