// Copyright 2022, OpenSergo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: opensergo/fault_tolerance/v1/fault_tolerance.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v1 "github.com/jnan806/opensergo-protocol-grpc-go/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RateLimitStrategy_MetricType int32

const (
	RateLimitStrategy_TYPE_UNKNOWN        RateLimitStrategy_MetricType = 0
	RateLimitStrategy_TYPE_REQUEST_AMOUNT RateLimitStrategy_MetricType = 1
)

// Enum value maps for RateLimitStrategy_MetricType.
var (
	RateLimitStrategy_MetricType_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_REQUEST_AMOUNT",
	}
	RateLimitStrategy_MetricType_value = map[string]int32{
		"TYPE_UNKNOWN":        0,
		"TYPE_REQUEST_AMOUNT": 1,
	}
)

func (x RateLimitStrategy_MetricType) Enum() *RateLimitStrategy_MetricType {
	p := new(RateLimitStrategy_MetricType)
	*p = x
	return p
}

func (x RateLimitStrategy_MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateLimitStrategy_MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_enumTypes[0].Descriptor()
}

func (RateLimitStrategy_MetricType) Type() protoreflect.EnumType {
	return &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_enumTypes[0]
}

func (x RateLimitStrategy_MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateLimitStrategy_MetricType.Descriptor instead.
func (RateLimitStrategy_MetricType) EnumDescriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{1, 0}
}

type RateLimitStrategy_LimitMode int32

const (
	RateLimitStrategy_MODE_UNKNOWN RateLimitStrategy_LimitMode = 0
	RateLimitStrategy_MODE_LOCAL   RateLimitStrategy_LimitMode = 1
	RateLimitStrategy_MODE_GLOBAL  RateLimitStrategy_LimitMode = 2
)

// Enum value maps for RateLimitStrategy_LimitMode.
var (
	RateLimitStrategy_LimitMode_name = map[int32]string{
		0: "MODE_UNKNOWN",
		1: "MODE_LOCAL",
		2: "MODE_GLOBAL",
	}
	RateLimitStrategy_LimitMode_value = map[string]int32{
		"MODE_UNKNOWN": 0,
		"MODE_LOCAL":   1,
		"MODE_GLOBAL":  2,
	}
)

func (x RateLimitStrategy_LimitMode) Enum() *RateLimitStrategy_LimitMode {
	p := new(RateLimitStrategy_LimitMode)
	*p = x
	return p
}

func (x RateLimitStrategy_LimitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateLimitStrategy_LimitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_enumTypes[1].Descriptor()
}

func (RateLimitStrategy_LimitMode) Type() protoreflect.EnumType {
	return &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_enumTypes[1]
}

func (x RateLimitStrategy_LimitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateLimitStrategy_LimitMode.Descriptor instead.
func (RateLimitStrategy_LimitMode) EnumDescriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{1, 1}
}

type ConcurrencyLimitStrategy_LimitMode int32

const (
	ConcurrencyLimitStrategy_MODE_UNKNOWN ConcurrencyLimitStrategy_LimitMode = 0
	ConcurrencyLimitStrategy_MODE_LOCAL   ConcurrencyLimitStrategy_LimitMode = 1
	ConcurrencyLimitStrategy_MODE_GLOBAL  ConcurrencyLimitStrategy_LimitMode = 2
)

// Enum value maps for ConcurrencyLimitStrategy_LimitMode.
var (
	ConcurrencyLimitStrategy_LimitMode_name = map[int32]string{
		0: "MODE_UNKNOWN",
		1: "MODE_LOCAL",
		2: "MODE_GLOBAL",
	}
	ConcurrencyLimitStrategy_LimitMode_value = map[string]int32{
		"MODE_UNKNOWN": 0,
		"MODE_LOCAL":   1,
		"MODE_GLOBAL":  2,
	}
)

func (x ConcurrencyLimitStrategy_LimitMode) Enum() *ConcurrencyLimitStrategy_LimitMode {
	p := new(ConcurrencyLimitStrategy_LimitMode)
	*p = x
	return p
}

func (x ConcurrencyLimitStrategy_LimitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConcurrencyLimitStrategy_LimitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_enumTypes[2].Descriptor()
}

func (ConcurrencyLimitStrategy_LimitMode) Type() protoreflect.EnumType {
	return &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_enumTypes[2]
}

func (x ConcurrencyLimitStrategy_LimitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConcurrencyLimitStrategy_LimitMode.Descriptor instead.
func (ConcurrencyLimitStrategy_LimitMode) EnumDescriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{3, 0}
}

type CircuitBreakerStrategy_Strategy int32

const (
	CircuitBreakerStrategy_STRATEGY_UNKNOWN             CircuitBreakerStrategy_Strategy = 0
	CircuitBreakerStrategy_STRATEGY_SLOW_REQUEST_RATIO  CircuitBreakerStrategy_Strategy = 1
	CircuitBreakerStrategy_STRATEGY_ERROR_REQUEST_RATIO CircuitBreakerStrategy_Strategy = 2
)

// Enum value maps for CircuitBreakerStrategy_Strategy.
var (
	CircuitBreakerStrategy_Strategy_name = map[int32]string{
		0: "STRATEGY_UNKNOWN",
		1: "STRATEGY_SLOW_REQUEST_RATIO",
		2: "STRATEGY_ERROR_REQUEST_RATIO",
	}
	CircuitBreakerStrategy_Strategy_value = map[string]int32{
		"STRATEGY_UNKNOWN":             0,
		"STRATEGY_SLOW_REQUEST_RATIO":  1,
		"STRATEGY_ERROR_REQUEST_RATIO": 2,
	}
)

func (x CircuitBreakerStrategy_Strategy) Enum() *CircuitBreakerStrategy_Strategy {
	p := new(CircuitBreakerStrategy_Strategy)
	*p = x
	return p
}

func (x CircuitBreakerStrategy_Strategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CircuitBreakerStrategy_Strategy) Descriptor() protoreflect.EnumDescriptor {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_enumTypes[3].Descriptor()
}

func (CircuitBreakerStrategy_Strategy) Type() protoreflect.EnumType {
	return &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_enumTypes[3]
}

func (x CircuitBreakerStrategy_Strategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CircuitBreakerStrategy_Strategy.Descriptor instead.
func (CircuitBreakerStrategy_Strategy) EnumDescriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{4, 0}
}

// FaultToleranceRule
type FaultToleranceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets    []*FaultToleranceRule_FaultToleranceRuleTargetRef `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	Strategies []*FaultToleranceRule_FaultToleranceStrategyRef   `protobuf:"bytes,2,rep,name=strategies,proto3" json:"strategies,omitempty"`
	Action     *FaultToleranceRule_FaultToleranceActionRef       `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *FaultToleranceRule) Reset() {
	*x = FaultToleranceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultToleranceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultToleranceRule) ProtoMessage() {}

func (x *FaultToleranceRule) ProtoReflect() protoreflect.Message {
	mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultToleranceRule.ProtoReflect.Descriptor instead.
func (*FaultToleranceRule) Descriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{0}
}

func (x *FaultToleranceRule) GetTargets() []*FaultToleranceRule_FaultToleranceRuleTargetRef {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *FaultToleranceRule) GetStrategies() []*FaultToleranceRule_FaultToleranceStrategyRef {
	if x != nil {
		return x.Strategies
	}
	return nil
}

func (x *FaultToleranceRule) GetAction() *FaultToleranceRule_FaultToleranceActionRef {
	if x != nil {
		return x.Action
	}
	return nil
}

// RateLimitStrategy
type RateLimitStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MetricType           RateLimitStrategy_MetricType `protobuf:"varint,2,opt,name=metric_type,json=metricType,proto3,enum=io.opensergo.fault_tolerance.v1.RateLimitStrategy_MetricType" json:"metric_type,omitempty"`
	LimitMode            RateLimitStrategy_LimitMode  `protobuf:"varint,3,opt,name=limit_mode,json=limitMode,proto3,enum=io.opensergo.fault_tolerance.v1.RateLimitStrategy_LimitMode" json:"limit_mode,omitempty"`
	Threshold            int64                        `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	StatDuration         int32                        `protobuf:"varint,5,opt,name=stat_duration,json=statDuration,proto3" json:"stat_duration,omitempty"`
	StatDurationTimeUnit v1.TimeUnit                  `protobuf:"varint,6,opt,name=stat_duration_time_unit,json=statDurationTimeUnit,proto3,enum=io.opensergo.common.v1.TimeUnit" json:"stat_duration_time_unit,omitempty"`
}

func (x *RateLimitStrategy) Reset() {
	*x = RateLimitStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitStrategy) ProtoMessage() {}

func (x *RateLimitStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitStrategy.ProtoReflect.Descriptor instead.
func (*RateLimitStrategy) Descriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{1}
}

func (x *RateLimitStrategy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RateLimitStrategy) GetMetricType() RateLimitStrategy_MetricType {
	if x != nil {
		return x.MetricType
	}
	return RateLimitStrategy_TYPE_UNKNOWN
}

func (x *RateLimitStrategy) GetLimitMode() RateLimitStrategy_LimitMode {
	if x != nil {
		return x.LimitMode
	}
	return RateLimitStrategy_MODE_UNKNOWN
}

func (x *RateLimitStrategy) GetThreshold() int64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *RateLimitStrategy) GetStatDuration() int32 {
	if x != nil {
		return x.StatDuration
	}
	return 0
}

func (x *RateLimitStrategy) GetStatDurationTimeUnit() v1.TimeUnit {
	if x != nil {
		return x.StatDurationTimeUnit
	}
	return v1.TimeUnit(0)
}

// ThrottlingStrategy
type ThrottlingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MinIntervalMillisOfRequests int64  `protobuf:"varint,2,opt,name=min_interval_millis_of_requests,json=minIntervalMillisOfRequests,proto3" json:"min_interval_millis_of_requests,omitempty"`
	QueueTimeoutMillis          int64  `protobuf:"varint,3,opt,name=queue_timeout_millis,json=queueTimeoutMillis,proto3" json:"queue_timeout_millis,omitempty"`
}

func (x *ThrottlingStrategy) Reset() {
	*x = ThrottlingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrottlingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottlingStrategy) ProtoMessage() {}

func (x *ThrottlingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottlingStrategy.ProtoReflect.Descriptor instead.
func (*ThrottlingStrategy) Descriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{2}
}

func (x *ThrottlingStrategy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThrottlingStrategy) GetMinIntervalMillisOfRequests() int64 {
	if x != nil {
		return x.MinIntervalMillisOfRequests
	}
	return 0
}

func (x *ThrottlingStrategy) GetQueueTimeoutMillis() int64 {
	if x != nil {
		return x.QueueTimeoutMillis
	}
	return 0
}

// ConcurrencyLimitStrategy
type ConcurrencyLimitStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LimitMode      ConcurrencyLimitStrategy_LimitMode `protobuf:"varint,2,opt,name=limit_mode,json=limitMode,proto3,enum=io.opensergo.fault_tolerance.v1.ConcurrencyLimitStrategy_LimitMode" json:"limit_mode,omitempty"`
	MaxConcurrency int64                              `protobuf:"varint,3,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
}

func (x *ConcurrencyLimitStrategy) Reset() {
	*x = ConcurrencyLimitStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyLimitStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyLimitStrategy) ProtoMessage() {}

func (x *ConcurrencyLimitStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyLimitStrategy.ProtoReflect.Descriptor instead.
func (*ConcurrencyLimitStrategy) Descriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{3}
}

func (x *ConcurrencyLimitStrategy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConcurrencyLimitStrategy) GetLimitMode() ConcurrencyLimitStrategy_LimitMode {
	if x != nil {
		return x.LimitMode
	}
	return ConcurrencyLimitStrategy_MODE_UNKNOWN
}

func (x *ConcurrencyLimitStrategy) GetMaxConcurrency() int64 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

// CircuitBreakerStrategy
type CircuitBreakerStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Strategy                CircuitBreakerStrategy_Strategy                      `protobuf:"varint,2,opt,name=strategy,proto3,enum=io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy_Strategy" json:"strategy,omitempty"`
	TriggerRatio            float64                                              `protobuf:"fixed64,3,opt,name=trigger_ratio,json=triggerRatio,proto3" json:"trigger_ratio,omitempty"`
	StatDuration            int64                                                `protobuf:"varint,4,opt,name=stat_duration,json=statDuration,proto3" json:"stat_duration,omitempty"`
	StatDurationTimeUnit    v1.TimeUnit                                          `protobuf:"varint,5,opt,name=stat_duration_time_unit,json=statDurationTimeUnit,proto3,enum=io.opensergo.common.v1.TimeUnit" json:"stat_duration_time_unit,omitempty"`
	RecoveryTimeout         int32                                                `protobuf:"varint,6,opt,name=recovery_timeout,json=recoveryTimeout,proto3" json:"recovery_timeout,omitempty"`
	RecoveryTimeoutTimeUnit v1.TimeUnit                                          `protobuf:"varint,7,opt,name=recovery_timeout_time_unit,json=recoveryTimeoutTimeUnit,proto3,enum=io.opensergo.common.v1.TimeUnit" json:"recovery_timeout_time_unit,omitempty"`
	MinRequestAmount        int32                                                `protobuf:"varint,8,opt,name=min_request_amount,json=minRequestAmount,proto3" json:"min_request_amount,omitempty"`
	SlowCondition           *CircuitBreakerStrategy_CircuitBreakerSlowCondition  `protobuf:"bytes,9,opt,name=slow_condition,json=slowCondition,proto3" json:"slow_condition,omitempty"`
	ErrorCondition          *CircuitBreakerStrategy_CircuitBreakerErrorCondition `protobuf:"bytes,10,opt,name=error_condition,json=errorCondition,proto3" json:"error_condition,omitempty"`
}

func (x *CircuitBreakerStrategy) Reset() {
	*x = CircuitBreakerStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakerStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerStrategy) ProtoMessage() {}

func (x *CircuitBreakerStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakerStrategy.ProtoReflect.Descriptor instead.
func (*CircuitBreakerStrategy) Descriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{4}
}

func (x *CircuitBreakerStrategy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CircuitBreakerStrategy) GetStrategy() CircuitBreakerStrategy_Strategy {
	if x != nil {
		return x.Strategy
	}
	return CircuitBreakerStrategy_STRATEGY_UNKNOWN
}

func (x *CircuitBreakerStrategy) GetTriggerRatio() float64 {
	if x != nil {
		return x.TriggerRatio
	}
	return 0
}

func (x *CircuitBreakerStrategy) GetStatDuration() int64 {
	if x != nil {
		return x.StatDuration
	}
	return 0
}

func (x *CircuitBreakerStrategy) GetStatDurationTimeUnit() v1.TimeUnit {
	if x != nil {
		return x.StatDurationTimeUnit
	}
	return v1.TimeUnit(0)
}

func (x *CircuitBreakerStrategy) GetRecoveryTimeout() int32 {
	if x != nil {
		return x.RecoveryTimeout
	}
	return 0
}

func (x *CircuitBreakerStrategy) GetRecoveryTimeoutTimeUnit() v1.TimeUnit {
	if x != nil {
		return x.RecoveryTimeoutTimeUnit
	}
	return v1.TimeUnit(0)
}

func (x *CircuitBreakerStrategy) GetMinRequestAmount() int32 {
	if x != nil {
		return x.MinRequestAmount
	}
	return 0
}

func (x *CircuitBreakerStrategy) GetSlowCondition() *CircuitBreakerStrategy_CircuitBreakerSlowCondition {
	if x != nil {
		return x.SlowCondition
	}
	return nil
}

func (x *CircuitBreakerStrategy) GetErrorCondition() *CircuitBreakerStrategy_CircuitBreakerErrorCondition {
	if x != nil {
		return x.ErrorCondition
	}
	return nil
}

type FaultToleranceRule_FaultToleranceRuleTargetRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetResourceName string `protobuf:"bytes,1,opt,name=target_resource_name,json=targetResourceName,proto3" json:"target_resource_name,omitempty"`
}

func (x *FaultToleranceRule_FaultToleranceRuleTargetRef) Reset() {
	*x = FaultToleranceRule_FaultToleranceRuleTargetRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultToleranceRule_FaultToleranceRuleTargetRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultToleranceRule_FaultToleranceRuleTargetRef) ProtoMessage() {}

func (x *FaultToleranceRule_FaultToleranceRuleTargetRef) ProtoReflect() protoreflect.Message {
	mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultToleranceRule_FaultToleranceRuleTargetRef.ProtoReflect.Descriptor instead.
func (*FaultToleranceRule_FaultToleranceRuleTargetRef) Descriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FaultToleranceRule_FaultToleranceRuleTargetRef) GetTargetResourceName() string {
	if x != nil {
		return x.TargetResourceName
	}
	return ""
}

type FaultToleranceRule_FaultToleranceStrategyRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *FaultToleranceRule_FaultToleranceStrategyRef) Reset() {
	*x = FaultToleranceRule_FaultToleranceStrategyRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultToleranceRule_FaultToleranceStrategyRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultToleranceRule_FaultToleranceStrategyRef) ProtoMessage() {}

func (x *FaultToleranceRule_FaultToleranceStrategyRef) ProtoReflect() protoreflect.Message {
	mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultToleranceRule_FaultToleranceStrategyRef.ProtoReflect.Descriptor instead.
func (*FaultToleranceRule_FaultToleranceStrategyRef) Descriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FaultToleranceRule_FaultToleranceStrategyRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FaultToleranceRule_FaultToleranceStrategyRef) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type FaultToleranceRule_FaultToleranceActionRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *FaultToleranceRule_FaultToleranceActionRef) Reset() {
	*x = FaultToleranceRule_FaultToleranceActionRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultToleranceRule_FaultToleranceActionRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultToleranceRule_FaultToleranceActionRef) ProtoMessage() {}

func (x *FaultToleranceRule_FaultToleranceActionRef) ProtoReflect() protoreflect.Message {
	mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultToleranceRule_FaultToleranceActionRef.ProtoReflect.Descriptor instead.
func (*FaultToleranceRule_FaultToleranceActionRef) Descriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{0, 2}
}

func (x *FaultToleranceRule_FaultToleranceActionRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FaultToleranceRule_FaultToleranceActionRef) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type CircuitBreakerStrategy_CircuitBreakerSlowCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAllowedRtMillis int32 `protobuf:"varint,1,opt,name=max_allowed_rt_millis,json=maxAllowedRtMillis,proto3" json:"max_allowed_rt_millis,omitempty"`
}

func (x *CircuitBreakerStrategy_CircuitBreakerSlowCondition) Reset() {
	*x = CircuitBreakerStrategy_CircuitBreakerSlowCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakerStrategy_CircuitBreakerSlowCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerStrategy_CircuitBreakerSlowCondition) ProtoMessage() {}

func (x *CircuitBreakerStrategy_CircuitBreakerSlowCondition) ProtoReflect() protoreflect.Message {
	mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakerStrategy_CircuitBreakerSlowCondition.ProtoReflect.Descriptor instead.
func (*CircuitBreakerStrategy_CircuitBreakerSlowCondition) Descriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CircuitBreakerStrategy_CircuitBreakerSlowCondition) GetMaxAllowedRtMillis() int32 {
	if x != nil {
		return x.MaxAllowedRtMillis
	}
	return 0
}

type CircuitBreakerStrategy_CircuitBreakerErrorCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CircuitBreakerStrategy_CircuitBreakerErrorCondition) Reset() {
	*x = CircuitBreakerStrategy_CircuitBreakerErrorCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakerStrategy_CircuitBreakerErrorCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerStrategy_CircuitBreakerErrorCondition) ProtoMessage() {}

func (x *CircuitBreakerStrategy_CircuitBreakerErrorCondition) ProtoReflect() protoreflect.Message {
	mi := &file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakerStrategy_CircuitBreakerErrorCondition.ProtoReflect.Descriptor instead.
func (*CircuitBreakerStrategy_CircuitBreakerErrorCondition) Descriptor() ([]byte, []int) {
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP(), []int{4, 1}
}

var File_opensergo_fault_tolerance_v1_fault_tolerance_proto protoreflect.FileDescriptor

var file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDesc = []byte{
	0x0a, 0x32, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x67, 0x6f, 0x2f, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72,
	0x67, 0x6f, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x67, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x04, 0x0a, 0x12, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x69, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x67,
	0x6f, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x0a,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x67, 0x6f, 0x2e,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x66, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x69, 0x6f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x67, 0x6f, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x4f, 0x0a, 0x1b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x43, 0x0a, 0x19, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x41, 0x0a, 0x17, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x8b, 0x04, 0x0a, 0x11, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x72, 0x67, 0x6f, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x72, 0x67, 0x6f, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x72, 0x67, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x37,
	0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x3e, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x6d, 0x69, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x4f, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x18, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x67, 0x6f, 0x2e, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3e, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xf5, 0x07, 0x0a, 0x16, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5c, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72,
	0x67, 0x6f, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x3c, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2c, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x17, 0x73,
	0x74, 0x61, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69,
	0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x67, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x14,
	0x73, 0x74, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69,
	0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x67, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x17,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x10, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x7a,
	0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x72, 0x67, 0x6f, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x0f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72,
	0x67, 0x6f, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x50, 0x0a, 0x1b, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x52, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x1a, 0x1e, 0x0a, 0x1c, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x08, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x02,
	0x42, 0x88, 0x01, 0x0a, 0x2d, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x13, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x6e, 0x61, 0x6e, 0x38, 0x30, 0x36, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x72, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x6f, 0x2f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescOnce sync.Once
	file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescData = file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDesc
)

func file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescGZIP() []byte {
	file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescOnce.Do(func() {
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescData = protoimpl.X.CompressGZIP(file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescData)
	})
	return file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDescData
}

var file_opensergo_fault_tolerance_v1_fault_tolerance_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_opensergo_fault_tolerance_v1_fault_tolerance_proto_goTypes = []interface{}{
	(RateLimitStrategy_MetricType)(0),                           // 0: io.opensergo.fault_tolerance.v1.RateLimitStrategy.MetricType
	(RateLimitStrategy_LimitMode)(0),                            // 1: io.opensergo.fault_tolerance.v1.RateLimitStrategy.LimitMode
	(ConcurrencyLimitStrategy_LimitMode)(0),                     // 2: io.opensergo.fault_tolerance.v1.ConcurrencyLimitStrategy.LimitMode
	(CircuitBreakerStrategy_Strategy)(0),                        // 3: io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.Strategy
	(*FaultToleranceRule)(nil),                                  // 4: io.opensergo.fault_tolerance.v1.FaultToleranceRule
	(*RateLimitStrategy)(nil),                                   // 5: io.opensergo.fault_tolerance.v1.RateLimitStrategy
	(*ThrottlingStrategy)(nil),                                  // 6: io.opensergo.fault_tolerance.v1.ThrottlingStrategy
	(*ConcurrencyLimitStrategy)(nil),                            // 7: io.opensergo.fault_tolerance.v1.ConcurrencyLimitStrategy
	(*CircuitBreakerStrategy)(nil),                              // 8: io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy
	(*FaultToleranceRule_FaultToleranceRuleTargetRef)(nil),      // 9: io.opensergo.fault_tolerance.v1.FaultToleranceRule.FaultToleranceRuleTargetRef
	(*FaultToleranceRule_FaultToleranceStrategyRef)(nil),        // 10: io.opensergo.fault_tolerance.v1.FaultToleranceRule.FaultToleranceStrategyRef
	(*FaultToleranceRule_FaultToleranceActionRef)(nil),          // 11: io.opensergo.fault_tolerance.v1.FaultToleranceRule.FaultToleranceActionRef
	(*CircuitBreakerStrategy_CircuitBreakerSlowCondition)(nil),  // 12: io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.CircuitBreakerSlowCondition
	(*CircuitBreakerStrategy_CircuitBreakerErrorCondition)(nil), // 13: io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.CircuitBreakerErrorCondition
	(v1.TimeUnit)(0),                                            // 14: io.opensergo.common.v1.TimeUnit
}
var file_opensergo_fault_tolerance_v1_fault_tolerance_proto_depIdxs = []int32{
	9,  // 0: io.opensergo.fault_tolerance.v1.FaultToleranceRule.targets:type_name -> io.opensergo.fault_tolerance.v1.FaultToleranceRule.FaultToleranceRuleTargetRef
	10, // 1: io.opensergo.fault_tolerance.v1.FaultToleranceRule.strategies:type_name -> io.opensergo.fault_tolerance.v1.FaultToleranceRule.FaultToleranceStrategyRef
	11, // 2: io.opensergo.fault_tolerance.v1.FaultToleranceRule.action:type_name -> io.opensergo.fault_tolerance.v1.FaultToleranceRule.FaultToleranceActionRef
	0,  // 3: io.opensergo.fault_tolerance.v1.RateLimitStrategy.metric_type:type_name -> io.opensergo.fault_tolerance.v1.RateLimitStrategy.MetricType
	1,  // 4: io.opensergo.fault_tolerance.v1.RateLimitStrategy.limit_mode:type_name -> io.opensergo.fault_tolerance.v1.RateLimitStrategy.LimitMode
	14, // 5: io.opensergo.fault_tolerance.v1.RateLimitStrategy.stat_duration_time_unit:type_name -> io.opensergo.common.v1.TimeUnit
	2,  // 6: io.opensergo.fault_tolerance.v1.ConcurrencyLimitStrategy.limit_mode:type_name -> io.opensergo.fault_tolerance.v1.ConcurrencyLimitStrategy.LimitMode
	3,  // 7: io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.strategy:type_name -> io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.Strategy
	14, // 8: io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.stat_duration_time_unit:type_name -> io.opensergo.common.v1.TimeUnit
	14, // 9: io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.recovery_timeout_time_unit:type_name -> io.opensergo.common.v1.TimeUnit
	12, // 10: io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.slow_condition:type_name -> io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.CircuitBreakerSlowCondition
	13, // 11: io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.error_condition:type_name -> io.opensergo.fault_tolerance.v1.CircuitBreakerStrategy.CircuitBreakerErrorCondition
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_opensergo_fault_tolerance_v1_fault_tolerance_proto_init() }
func file_opensergo_fault_tolerance_v1_fault_tolerance_proto_init() {
	if File_opensergo_fault_tolerance_v1_fault_tolerance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultToleranceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThrottlingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrencyLimitStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakerStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultToleranceRule_FaultToleranceRuleTargetRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultToleranceRule_FaultToleranceStrategyRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultToleranceRule_FaultToleranceActionRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakerStrategy_CircuitBreakerSlowCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakerStrategy_CircuitBreakerErrorCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opensergo_fault_tolerance_v1_fault_tolerance_proto_goTypes,
		DependencyIndexes: file_opensergo_fault_tolerance_v1_fault_tolerance_proto_depIdxs,
		EnumInfos:         file_opensergo_fault_tolerance_v1_fault_tolerance_proto_enumTypes,
		MessageInfos:      file_opensergo_fault_tolerance_v1_fault_tolerance_proto_msgTypes,
	}.Build()
	File_opensergo_fault_tolerance_v1_fault_tolerance_proto = out.File
	file_opensergo_fault_tolerance_v1_fault_tolerance_proto_rawDesc = nil
	file_opensergo_fault_tolerance_v1_fault_tolerance_proto_goTypes = nil
	file_opensergo_fault_tolerance_v1_fault_tolerance_proto_depIdxs = nil
}
